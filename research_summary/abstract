Software architecture definition is an inevitable and a major step in the software development process. By defining elements, their behavior and relationship between the elements, software architecture focus to achieve not only the functional goals to build the product but also to accomplish non-functional as well as organizational goals in an efficient process. There is another crucial element that has always affected and will continue to affect the architecture constantly, which is "Change". The change can appear in various ways. There can be change in requirement, change in the environment, change in the organizational goals and change in the expectation of the product. In any case, it makes software architecture to evolove. From the history of software, we have seen architectural evolution from monolithic, to layered and to client-server and then to service oriented architecture, to name just few. From midth 2013, microservices architecture has evoloved and been receiving a huge amount of attention. As other architectural styles, microservices presents its approach by focusing on increasing cohesion and decreasing coupling. Besides that, it breaks down system along business domains following single responsibility principle.
Although there are various advantages to follow microservices architecture style and which are well documented and communicated, the process to create microservices is still not clearly communicated. This topic is still a matter of discussion and the process is inconsistent. May be there are more factors necessary to make the topic transparent. Moreover, there are bigger questions like how the appropriate size and boundary of microservice is decided, what are the important challenges of following microservices architecture and nevertheless, what are the best practices to define microservices. In this thesis, I will try to answer these questions.
In order to make the research more valuable, a real world scenario for the usage of microservices will be taken. The process followed by Hybris, which is a company developing online e-commerce platform, will be studied while adopting microservices. Additionally, the process as described in scientific literature will also be studied. Hopefully, this will help to add authenticity to the research. With the combined knowledge, the basic guidelines for incorporating microservices will be induced. Finally, the guideliness will be critically analyzed by the various domain experts to check their usability and efficiency.


Abstract

Architecture style has evolved a long way from monolithic to service oriented architecture. Microservices architecture, after its introduction in mid of 2013, has been receiving a huge amount of attention. As other architectural styles, microservices presents its approach by focusing on increasing cohesion and decreasing coupling. Besides that, it breaks down system along business domains following single responsibility principle. This leads to various clear advantages such as independent build and life cycle of features, fast response to changes etc.
However, the process to create microservices is still not clearly communicated or documented either. There is no specific guidelines regarding when and how microservices should be designed. Moreover, there are still confusion related to various topics such as, what should be avoided to get best advantages of microservices, how to accurately map business context to microservices and how big or small a microservice should be, etc. Nevertheless, the thesis aims to answer following broad questions.
1. How are the boundaries and size of microservice defined?
2. What are the challenges in the microservice architecture?
3. What are the best practices for defining microservice architecture?

In the beginning, I will study about the core concepts regarding microservices architecture as well as the process of defining microservices following the scientific literature. The focus will be to achieve basic understanding regarding microservices
architecture and the mapping of business context to microservices.
The next step will concentrate on the methodology followed in hybris. I will understand the process followed by hybris to identify the individual microservices for fulfilling business requirements. It will also be interesting to identify the assumptions made during the process and new challenges faced by incorporating microservices architecture including the workaround. In order to achieve the goals, I will study the available documents from hybris and do questionnaires with the domain experts when necessary. 
Having looked in detail with the perspective of company, I will look into the general challenges and limitation of microservices using scientific documents. Moreover, I will also research about the way of defining boundaries and communication between
microservices.
Then, with all gathered knowledge from case study and scientific literature, I will try to define guidelines for the process of designing microservice architecture. I will focus on the various criteria to consider as well as t/Users/d063398/mine/thesis_research/research_summary/approachhe recommendation for best solution depending upon scenario. The guidelines will try to simplify what should be used and what should be avoided.
Finally, I will include the critical analysis made by domain experts regarding the guidelines produced. This will try to clarify usability scenario of the guidelines to the business use cases.
In order to answer the research questions, I will implement mixed (or pragmatic) research methodology. I will follow qualitative approach when I need a deeper understanding of a useful topic. And if there is a necessity to decide upon a probable solution, when there are more possible options available, I will try to employ quantitative approach. I believe the unbiased use of the methodologies will provide a good
advantage to my research.

Newman, S. (2015): Building Microservices Designing Fine –Grained Systems.
O’REILLY
Woolf, B. & Hohpe, G. (2003): Enterprise Integration Patterns: Designing, Building, and
Deploying Messaging Solutions. The Addition Wesley Signature Series
Vernon, V. (2013): Implementing Domain-Driven Design. DDD Community
Webber, J. & Parastatidis, S. & Robinson, I. (2010): REST in Practice Hypermedia and
Systems Architecture. O’REILLY